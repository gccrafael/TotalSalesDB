/*
 * SalesDBView.java
 */

package salesdb;

import business.Customer;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.*;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.sql.DriverManager;
import java.text.NumberFormat;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
/**
 * The application's main frame.
 */
public class SalesDBView extends FrameView {
    String dbURL = "jdbc:mysql://localhost:3306/salesdb";
    String dbuser = "root";
    String dbPassword = "sesame";
    boolean loading = false; //added to avoid error for no item selected
    public SalesDBView(SingleFrameApplication app) {
        super(app);

        initComponents();
        jTable1.setName(null);
        jTable1.setModel(new DefaultTableModel());
        URL url = ClassLoader.getSystemResource("salesdb/sales.jpg");
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.createImage(url);

        Frame[] frames = JFrame.getFrames();
        for (int i = 0; i < frames.length; i++) {
            frames[i].setIconImage(img);
        }
        
      
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SalesDBApp.getApplication().getMainFrame();
            aboutBox = new SalesDBAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SalesDBApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jcmbCustomer = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jtxtTotSale = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jmnuLoad = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(salesdb.SalesDBApp.class).getContext().getResourceMap(SalesDBView.class);
        mainPanel.setToolTipText(resourceMap.getString("mainPanel.toolTipText")); // NOI18N
        mainPanel.setName("mainPanel"); // NOI18N

        jcmbCustomer.setEnabled(false);
        jcmbCustomer.setName("jcmbCustomer"); // NOI18N
        jcmbCustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbCustomerItemStateChanged(evt);
            }
        });
        jcmbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbCustomerActionPerformed(evt);
            }
        });

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jtxtTotSale.setEditable(false);
        jtxtTotSale.setBackground(resourceMap.getColor("jtxtTotSale.background")); // NOI18N
        jtxtTotSale.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtxtTotSale.setText(resourceMap.getString("jtxtTotSale.text")); // NOI18N
        jtxtTotSale.setName("jtxtTotSale"); // NOI18N
        jtxtTotSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtTotSaleActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(jtxtTotSale, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(485, 485, 485))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jButton1)
                        .addGap(17, 17, 17)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtTotSale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(37, 37, 37))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        jmnuLoad.setText(resourceMap.getString("jmnuLoad.text")); // NOI18N
        jmnuLoad.setName("jmnuLoad"); // NOI18N
        jmnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmnuLoadActionPerformed(evt);
            }
        });
        fileMenu.add(jmnuLoad);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(salesdb.SalesDBApp.class).getContext().getActionMap(SalesDBView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 762, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jcmbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcmbCustomerActionPerformed

    private void jtxtTotSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtTotSaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtTotSaleActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        statusMessageLabel.setText("");
        jtxtTotSale.setText("");
        jTable1.setModel(new DefaultTableModel());
        jcmbCustomer.removeAllItems();
        jcmbCustomer.setEnabled(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        
    }//GEN-LAST:event_fileMenuActionPerformed

    private void jmnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmnuLoadActionPerformed
        loading = true;
        NumberFormat curr =NumberFormat.getCurrencyInstance();
        jtxtTotSale.setText(curr.format(0));
        try {
             Connection conn = DriverManager.getConnection(dbURL, dbuser, dbPassword);
             Statement s = conn.createStatement();
             String sql = "SELECT * FROM customer ORDER BY NAME";
             ResultSet r = s.executeQuery(sql);
             r.last();
             statusMessageLabel.setText("Customers read = " + r.getRow());
             r.first();
             do {
                 Customer c = new Customer();
                 c.setCustomerId(r.getLong("Customer_ID"));
                 c.setName(r.getString("Name"));
                 c.setAddress(r.getString("Address"));
                 c.setCity(r.getString("City"));
                 c.setState(r.getString("State"));
                 c.setZipCode(r.getString("Zip_Code"));
                 c.setAreaCode(r.getLong("Area_Code"));
                 c.setPhoneNumber(r.getLong("Phone_Number"));
                 c.setSalesPersonId(r.getLong("Salesperson_ID"));
                 c.setCreditLimit(r.getDouble("Credit_Limit"));
                 c.setComments(r.getString("Comments"));
                 
                 jcmbCustomer.addItem(c);
                 
             } while (r.next());
             
             r.close();
             conn.close();
             jcmbCustomer.setEnabled(true);
             jcmbCustomer.setSelectedIndex(-1);
        } catch (SQLException e) {
            statusMessageLabel.setText("SQL Error: " + e.getMessage());
        }
        loading = false; //added to avoid error for no item selected
                
    }//GEN-LAST:event_jmnuLoadActionPerformed

    private void jcmbCustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbCustomerItemStateChanged
        if (loading == true) { return;}
        if (jcmbCustomer.getSelectedIndex() == -1)
        {
            statusMessageLabel.setText("No customer selected");
            return;
        }
        
        String sql = "";
        try
        {       
            Customer c = (Customer)jcmbCustomer.getSelectedItem();
            sql = "SELECT s.order_date, s.order_id, s.ship_date, count(i.item_id) As ItemCount, s.total " +
                         " FROM sales_order s, item i " + 
                         " WHERE s.order_id = i.order_id AND s.customer_id = " + c.getCustomerId() +
                         " GROUP BY s.order_date, s.order_id, s.ship_date, s.total " +
                         " ORDER BY s.order_date, s.order_id";
            
            Connection conn = DriverManager.getConnection(dbURL, dbuser, dbPassword);
            Statement s = conn.createStatement();
            ResultSet r = s.executeQuery(sql);                    
                       
            r.last();
            statusMessageLabel.setText("Sales Orders read = " + r.getRow());
                        
            String[] cols = {"Order Date", "Order ID", "Ship Date", "Item Count", "Order Total"};        
            String[][] t = new String[r.getRow()][5];
            DefaultTableModel m = new DefaultTableModel(t, cols);
            jTable1.setModel(m);                               
            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment( JLabel.RIGHT );
            jTable1.getColumnModel().getColumn(3).setCellRenderer( rightRenderer );
            jTable1.getColumnModel().getColumn(4).setCellRenderer( rightRenderer );
            
            NumberFormat curr = NumberFormat.getCurrencyInstance(); 
            
            double total0 = 0;
            
            if (r.getRow() == 0)
            {  
                jTable1.setValueAt("No Sales on File.", 0, 4);                
            }          
            else
            {
                r.first();
                do
                {
                    int tableRow = r.getRow() -1;
                    jTable1.setValueAt(r.getDate("order_date"), tableRow, 0);
                    jTable1.setValueAt(r.getInt("order_id"), tableRow, 1);
                    jTable1.setValueAt(r.getDate("ship_date"), tableRow, 2);
                    jTable1.setValueAt(r.getLong("ItemCount"), tableRow, 3);                
                    jTable1.setValueAt(curr.format(r.getDouble("total")), tableRow, 4);
                    total0 += r.getDouble("total");
                    
                } while (r.next());
                jtxtTotSale.setText(curr.format(total0));
            }
        }           
        catch (SQLException e)
        {
            statusMessageLabel.setText("SQL Error" + e.getMessage() + " " + sql);           
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {                
            String[] cols = {"Order Date", "Order ID", "Ship Date", "Item Count", "Order Total"};        
            String[][] t = new String[1][5];
            DefaultTableModel m = new DefaultTableModel(t, cols);
            jTable1.setModel(m);            
            DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
            rightRenderer.setHorizontalAlignment( JLabel.RIGHT );
            jTable1.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
            jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(300);            
            jTable1.setValueAt("No sales on file.", 0, 4);
            jtxtTotSale.setText("$0.00");
        }        
    }//GEN-LAST:event_jcmbCustomerItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcmbCustomer;
    private javax.swing.JMenuItem jmnuLoad;
    private javax.swing.JTextField jtxtTotSale;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    private void FormatTable(String order_Date, String order_ID, String ship_Date, String item_Count, String order_Total, int row, JTable jTable1) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void FormatException(JTable jTable1, JTextField jtxtTotSale) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
